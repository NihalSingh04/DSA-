/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    void markParents(TreeNode* root, TreeNode* target, unordered_map<TreeNode*, TreeNode*> &parent_track)
    {
        queue<TreeNode*> trackParent;
        trackParent.push(root);
        while(!trackParent.empty())
        {
            TreeNode* currNode = trackParent.front();
            trackParent.pop();
            if(currNode->left)
            {
                parent_track[currNode->left]=currNode;
                trackParent.push(currNode->left);
            }
            if(currNode->right)
            {
                parent_track[currNode->right]=currNode;
                trackParent.push(currNode->right);
            }
        }
    }
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, TreeNode*> parent_track;
        markParents(root, target, parent_track);

        unordered_map<TreeNode*, bool> vis;
        queue<TreeNode*> q;
        q.push(target);
        vis[target]=true;
        int currLevel=0;
        while(!q.empty())
        {
            int size=q.size();
            if(currLevel++ == k) break;
            for(int i=0;i<size;i++)
            {
                TreeNode* current=q.front();
                q.pop();
                if(current->left && !vis[current->left])
                {
                    q.push(current->left);
                    vis[current->left]=true;
                }

                if(current->right && !vis[current->right])
                {
                    q.push(current->right);
                    vis[current->right]=true;
                }

                if(parent_track[current] && !vis[parent_track[current]])
                {
                    q.push(parent_track[current]);
                    vis[parent_track[current]]=true;
                }
            }
        }

        vector<int> ans;
        while(!q.empty())
        {
            TreeNode* current = q.front();
            q.pop();
            ans.push_back(current->val);
        }
        return ans;
        
    }
};
